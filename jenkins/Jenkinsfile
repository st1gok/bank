pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = credentials('DOCKER_REGISTRY')
        DB_PASSWORD     = credentials('DB_PASSWORD')
        GITHUB_USERNAME = credentials('GITHUB_USERNAME')
        DB_NAME         = 'mydb'
        DB_USER         = 'myuser'
        IMAGE_TAG       = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('Build & Unit Tests') {
           steps {
                sh 'mvn clean install'
           }

        }

        stage('Build Docker Images') {
            steps {
                sh """
                docker build -t bank-account-service:${IMAGE_TAG} account
                docker build -t bank-blocker-service:${IMAGE_TAG} blocker
                docker build -t bank-cash-service:${IMAGE_TAG} cash
                docker build -t bank-exchange-service:${IMAGE_TAG} exchange
                docker build -t bank-exchange-generator-service:${IMAGE_TAG} exchange-generator
                docker build -t bank-front-service:${IMAGE_TAG} front
                docker build -t bank-notification-service:${IMAGE_TAG} notification
                docker build -t bank-transfer-service:${IMAGE_TAG} transfer
                """
            }
        }

//         stage('Push Docker Images') {
//             steps {
//                 withCredentials([string(credentialsId: 'GHCR_TOKEN', variable: 'GHCR_TOKEN')]) {
//                     sh """
//                     echo \$GHCR_TOKEN | docker login ghcr.io -u ${GITHUB_USERNAME} --password-stdin
//                     docker push ${DOCKER_REGISTRY}/customer-service:${IMAGE_TAG}
//                     docker push ${DOCKER_REGISTRY}/order-service:${IMAGE_TAG}
//                     """
//                 }
//             }
//         }

        stage('Create DB Secrets for TEST') {
            steps {
                sh """
                kubectl delete secret realm-secret -n test --ignore-not-found
                kubectl delete secret keycloak-secret -n test --ignore-not-found
                kubectl delete secret account-secret -n test --ignore-not-found
                kubectl create secret generic realm-secret --from-file=./realms/realm-export.json -n test
                kubectl create secret generic keycloak-secret --from-literal=admin-password=${DB_PASSWORD} -n test --dry-run -o yaml | kubectl apply -f -
                kubectl create secret generic account-secret --from-literal=postgresql-password=${DB_PASSWORD} -n test --dry-run -o yaml | kubectl apply -f -
                """
            }
        }

        stage('Helm Deploy to TEST') {
            steps {
                dir('helm/bank-app') {
                    sh """
                    helm dependencies build
                    helm upgrade --install bankapp . \\
                    --namespace test --create-namespace \\
                    --atomic --wait \\
                    --set account-service.image.tag=${IMAGE_TAG} \\
                    --set front-service.image.tag=${IMAGE_TAG} \\
                    --set cash-service.image.tag=${IMAGE_TAG} \\
                    --set blocker-service.image.tag=${IMAGE_TAG} \\
                    --set exchange-service.image.tag=${IMAGE_TAG} \\
                    --set exchange-generator-service.image.tag=${IMAGE_TAG} \\
                    --set notification-service.image.tag=${IMAGE_TAG} \\
                    --set transfer-service.image.tag=${IMAGE_TAG}
                    """
                }
            }
        }

        stage('Manual Approval for PROD') {
            steps {
                input message: 'Deploy to PROD environment?', ok: 'Yes, deploy'
            }
        }

        stage('Create DB Secrets for PROD') {
            steps {
                sh """
                kubectl delete secret realm-secret -n prod --ignore-not-found
                kubectl delete secret keycloak-secret -n prod --ignore-not-found
                kubectl delete secret account-secret -n prod --ignore-not-found
                kubectl create secret generic realm-secret --from-file=./realms/realm-export.json -n prod
                kubectl create secret generic keycloak-secret --from-literal=admin-password=${DB_PASSWORD} -n prod --dry-run -o yaml | kubectl apply -f -
                kubectl create secret generic account-secret --from-literal=postgresql-password=${DB_PASSWORD} -n prod --dry-run -o yaml | kubectl apply -f -
                """
            }
        }

        stage('Helm Deploy to PROD') {
            steps {
                dir('helm/bank-app') {
                    sh """
                    helm upgrade --install bankapp . \\
                    --namespace prod --create-namespace \\
                    --atomic --wait \\
                    --set account-service.image.tag=${IMAGE_TAG} \\
                    --set front-service.image.tag=${IMAGE_TAG} \\
                    --set cash-service.image.tag=${IMAGE_TAG} \\
                    --set blocker-service.image.tag=${IMAGE_TAG} \\
                    --set exchange-service.image.tag=${IMAGE_TAG} \\
                    --set exchange-generator-service.image.tag=${IMAGE_TAG} \\
                    --set notification-service.image.tag=${IMAGE_TAG} \\
                    --set transfer-service.image.tag=${IMAGE_TAG}
                    """
                }
            }
        }
    }
}